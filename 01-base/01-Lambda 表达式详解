





🚀 什么是 Lambda 表达式？
Lambda 是 C++11 引入的一种轻量函数对象语法，可以像函数一样使用，也能作为参数传递。

它让你在需要临时函数的地方，不用再额外写函数名或类。


🔧 基本语法
[捕获列表](参数列表) -> 返回类型 {
    函数体
};
如果返回类型能推导，可以省略 -> 返回类型。参数也可以省略。



✅ 示例：最小 lambda
auto f = [] { std::cout << "Hello Lambda\n"; };
f();  // 调用


🧠 捕获列表详解
捕获方式 | 示例 | 含义
------------|------|-----
[] | 不捕获任何变量
[=] | 按值捕获所有外部变量（拷贝）
[&] | 按引用捕获所有外部变量（可修改外部）
[x] | 按值捕获 x
[&x] | 按引用捕获 x
[=, &y] | 默认按值捕获，但 y 例外按引用
[this] | 捕获当前类的 this 指针（访问成员变量）

：使用变量
int a = 10, b = 20;

auto sum = [=]() { return a + b; };   // 捕获 a 和 b 的副本
auto mod = [&]() { b -= a; };         // 捕获引用，修改 b
auto mix = [=, &b]() { b += a; };     // a 拷贝，b 引用


🧪 示例：传入参数
auto add = [](int x, int y) -> int {
    return x + y;
};

int result = add(3, 4);  // 7


⛓ 用法：与 std::function 配合
#include <functional>

std::function<int(int)> square = [](int x) { return x * x; };



⏱ 用法：与线程或异步搭配
std::thread t([] {
    std::cout << "Running in thread\n";
});
t.join();


🔂 用法：std::for_each / 算法
std::vector<int> v = {1, 2, 3};
std::for_each(v.begin(), v.end(), [](int x) {
    std::cout << x << " ";
});


✨ 高级：可变 lambda（mutable）
默认 lambda 捕获按值时不允许修改被捕获变量的副本，mutable 允许这么做：

int x = 5;
auto f = [=]() mutable { x += 10; std::cout << x; };
f(); // 输出 15
std::cout << x; // 输出还是 5，说明修改的是副本


🧩 高级：递归 lambda（C++14 起）
std::function<int(int)> fib = [&](int n) {
    return n <= 1 ? n : fib(n - 1) + fib(n - 2);
};


🧹 Lambda 是什么类型？
它是一个编译器生成的匿名类对象，重载了 operator()，所以可以像函数一样调用。



🔚 总结
| 特点     | 是否支持          |
| ------ | ------------- |
| 捕获变量   | ✅ 支持各种方式      |
| 传参     | ✅ 可带任意参数      |
| 返回类型   | ✅ 可自动推导或指定    |
| 与标准库兼容 | ✅ 完美支持        |
| 多线程支持  | ✅ 可传入线程、异步任务  |
| 类成员访问  | ✅ 支持 `[this]` |
